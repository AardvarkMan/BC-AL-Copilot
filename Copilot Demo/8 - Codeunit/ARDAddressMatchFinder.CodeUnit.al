codeunit 50005 ARD_AddressMatchFinder
{
    trigger OnRun()
    begin
        CompletionResult := Chat(GetSystemPrompt(), UserPrompt);
    end;

    /// <summary>
    /// Sets the user prompt to be used for generating address proposals or chat completions.
    /// </summary>
    /// <param name="InputUserPrompt">The text input provided by the user.</param>
    /// <remarks>
    /// This procedure assigns the provided user input to the `UserPrompt` variable, 
    /// which is later used in other procedures such as `GenerateAddressProposal` or `Chat`.
    /// </remarks>
    procedure SetUserPrompt(InputUserPrompt: Text)
    begin
        UserPrompt := InputUserPrompt;
    end;

    /// <summary>
    /// Retrieves the dictionary containing address details generated from the user prompt.
    /// </summary>
    /// <returns>
    /// A dictionary of key-value pairs representing address details.
    /// </returns>
    procedure GetResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// Retrieves the completion result generated from the address proposal or chat process.
    /// </summary>
    /// <returns>
    /// A text value representing the completion result.
    /// </returns>
    internal procedure GetCompletionResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// The Chat procedure interacts with Azure OpenAI to generate a chat completion based on the provided system and user prompts.
    /// It uses various helper codeunits to configure and manage the interaction, including setting up authorization, 
    /// configuring chat parameters, and handling responses.
    /// </summary>
    /// <param name="ChatSystemPrompt">The system prompt to guide the chat completion.</param>
    /// <param name="ChatUserPrompt">The user prompt to provide input for the chat completion.</param>
    /// <returns>
    /// A text result containing the response generated by Azure OpenAI. 
    /// If the operation fails, an error is raised with the corresponding error message.
    /// </returns>
    procedure Chat(ChatSystemPrompt: Text; ChatUserPrompt: Text): Text
    var
        AzureOpenAI: Codeunit "Azure OpenAI";
        EnvironmentInformation: Codeunit "Environment Information";
        AOAIOperationResponse: Codeunit "AOAI Operation Response";
        AOAIChatCompletionParams: Codeunit "AOAI Chat Completion Params";
        AOAIChatMessages: Codeunit "AOAI Chat Messages";
        AOAIDeployments: Codeunit "AOAI Deployments";
        IsolatedStorageWrapper: Codeunit ARD_IsolatedStorageWrapper;
        Result: Text;
        EntityTextModuleInfo: ModuleInfo;
    begin
        // Set up Azure OpenAI authorization using isolated storage values
        /*AzureOpenAI.SetAuthorization(Enum::"AOAI Model Type"::"Chat Completions",
         IsolatedStorageWrapper.GetEndpoint(), IsolatedStorageWrapper.GetDeployment(), IsolatedStorageWrapper.GetSecretKey());*/

        // Set up Azure OpenAI authorization using isolated storage values, use the Managed Resource Authorization
        AzureOpenAI.SetManagedResourceAuthorization(Enum::"AOAI Model Type"::"Chat Completions",
        IsolatedStorageWrapper.GetAOAIAccountName(), IsolatedStorageWrapper.GetSecretKey(), AoaiDeployments.GetGPT41Latest());


        // Set the Copilot capability for customer detail processing
        AzureOpenAI.SetCopilotCapability(Enum::"Copilot Capability"::"Customer Detail");

        // Configure chat completion parameters
        AOAIChatCompletionParams.SetMaxTokens(2500); // Set maximum tokens for the response
        AOAIChatCompletionParams.SetTemperature(0); // Set temperature for deterministic responses
        AOAIChatCompletionParams.SetJsonMode(true); // Enable JSON mode for structured responses

        // Add system and user messages to the chat
        AOAIChatMessages.AddSystemMessage(ChatSystemPrompt); // Add the system prompt
        AOAIChatMessages.AddUserMessage(ChatUserPrompt); // Add the user prompt

        // Generate the chat completion using Azure OpenAI
        AzureOpenAI.GenerateChatCompletion(AOAIChatMessages, AOAIChatCompletionParams, AOAIOperationResponse);

        // Check if the operation was successful and return the result
        if AOAIOperationResponse.IsSuccess() then
            Result := AOAIChatMessages.GetLastMessage() // Retrieve the last message from the chat
        else
            Error(AOAIOperationResponse.GetError()); // Handle errors by raising an error with the response message

        exit(Result); // Return the result of the chat completion
    end;

    // Local procedure to provide the system prompt for the chat completion
    local procedure GetSystemPrompt() SystemPrompt: Text
    begin
        // Define the system prompt that instructs the AI on how to process the user's input
        SystemPrompt := @'You are a professional postal worker.
A list of addresses will be provided, and your task is to find the address that best matches the address with addressno "user".
The matching criteria is based on the ability of the postal service to deliver mail to the user address.
Differences between abreviated and full forms of the address state should not be considered.
Differences between the abreviated and full forms of street desginations should not be considered.
Differences in the order of the address lines should not be considered.
Differences in states designations with matching postal codes should be considered highly not matching.
All the addresses will be in an JSON object with an array of JSON objects with the following fields:
addressno, addressline1, addressline2, city, state, country, postalCode.
The address with addressid = user will be the address provided by the user for which the best match is to be found.
You will return a JSON object named "results" with an array of JSON objects containing the addressno of each address in the array, except the address with addressno = user.
Each address in the array will have the following fields: addressno, percentageMatch.
The resultant JSON object should look like this:
{
    "results": [
        {
            "addressno": "address1",
            "percentageMatch": 0.95
        },
        {
            "addressno": "address2",
            "percentageMatch": 0.90
        }
    ]
}
The percentageMatch is a number between 0 and 1, where 1 is a perfect match and 0 is no match at all.
The address with the highest percentageMatch should be considered the best match.
The address with the highest percentageMatch should be returned first in the array.';
    end;

    var
        UserPrompt: Text;
        CompletionResult: Text;
}
