// <summary>
/// Runs the generation process for address proposals using Dynamics 365 Copilot.
/// https://aardvarklabs.blog/2025/05/27/creating-data-driven-text-with-ai-in-business-central/
// </summary>
codeunit 50003 ARD_CopilotReminderGenerator
{
    trigger OnRun()
    begin
        GenerateInvoiceProposal();
    end;

    /// <summary>
    /// Sets the user prompt to be used for generating invoice reminders.
    /// </summary>
    /// <param name="InputUserPrompt">The text input provided by the user.</param>
    /// <param name="CustomerName">The name of the customer.</param>
    /// <param name="Tone">The tone of the reminder (e.g., friendly, formal).</param>
    /// <param name="BalanceDue">The balance due for the customer.</param>
    /// <param name="LastInvoiceDate">The date of the last invoice for the customer.</param>
procedure SetUserPrompt(InputUserPrompt: Text; CustomerName: Text; Tone: Text; BalanceDue: Decimal; LastInvoiceDate: Date)
var
    UserPromptBuilder: TextBuilder;
begin
    if InputUserPrompt <> '' then UserPromptBuilder.AppendLine(InputUserPrompt);
    UserPromptBuilder.AppendLine('Customer Name: ' + CustomerName);
    UserPromptBuilder.AppendLine('Balance Due: ' + Format(BalanceDue));
    UserPromptBuilder.AppendLine('Last Invoice Date: ' + Format(LastInvoiceDate));
    UserPromptBuilder.AppendLine('Tone: ' + Tone);
    UserPrompt := UserPromptBuilder.ToText();
end;

    /// <summary>
    /// Retrieves the completion result generated from the address proposal or chat process.
    /// </summary>
    /// <returns>
    /// A text value representing the completion result.
    /// </returns>
    internal procedure GetCompletionResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// Generates an address proposal by processing a user prompt and parsing the response.
    /// The response is expected to be in JSON format, and the method extracts key-value pairs
    /// to populate the AddressDict dictionary. If a 'formatted' address is found, it is returned
    /// as the completion result; otherwise, a default message is returned.
    /// </summary>
    /// <remarks>
    /// This method uses a chat function to generate a response based on a system prompt and user input.
    /// The response is parsed as JSON, and keys are added to the AddressDict dictionary in lowercase.
    /// </remarks>
    /// <param name="GetSystemPrompt">A function that provides the system prompt for the chat.</param>
    /// <param name="UserPrompt">The user-provided input for generating the address proposal.</param>
    /// <returns>
    /// A formatted address if available in the response, or a default message indicating no formatted address was found.
    /// </returns>
    local procedure GenerateInvoiceProposal()
    var
    begin
        CompletionResult := '';
        CompletionResult := Chat(GetSystemPrompt(), UserPrompt);
    end;

    /// <summary>
    /// The Chat procedure interacts with Azure OpenAI to generate a chat completion based on the provided system and user prompts.
    /// It uses various helper codeunits to configure and manage the interaction, including setting up authorization, 
    /// configuring chat parameters, and handling responses.
    /// </summary>
    /// <param name="ChatSystemPrompt">The system prompt to guide the chat completion.</param>
    /// <param name="ChatUserPrompt">The user prompt to provide input for the chat completion.</param>
    /// <returns>
    /// A text result containing the response generated by Azure OpenAI. 
    /// If the operation fails, an error is raised with the corresponding error message.
    /// </returns>
procedure Chat(ChatSystemPrompt: Text; ChatUserPrompt: Text): Text
var
    AzureOpenAI: Codeunit "Azure OpenAI";
    EnvironmentInformation: Codeunit "Environment Information";
    AOAIOperationResponse: Codeunit "AOAI Operation Response";
    AOAIChatCompletionParams: Codeunit "AOAI Chat Completion Params";
    AOAIChatMessages: Codeunit "AOAI Chat Messages";
    AOAIDeployments: Codeunit "AOAI Deployments";
    IsolatedStorageWrapper: Codeunit ARD_IsolatedStorageWrapper;
    Result: Text;
    EntityTextModuleInfo: ModuleInfo;
begin
    // Set up Azure OpenAI authorization using isolated storage values
    AzureOpenAI.SetAuthorization(Enum::"AOAI Model Type"::"Chat Completions",
        IsolatedStorageWrapper.GetEndpoint(), IsolatedStorageWrapper.GetDeployment(), IsolatedStorageWrapper.GetSecretKey());

    // Set the Copilot capability for customer detail processing
    AzureOpenAI.SetCopilotCapability(Enum::"Copilot Capability"::"Customer Detail");

    // Configure chat completion parameters
    AOAIChatCompletionParams.SetMaxTokens(2500); // Set maximum tokens for the response
    AOAIChatCompletionParams.SetTemperature(0.7); // Set temperature for deterministic responses
    AOAIChatCompletionParams.SetJsonMode(false); // Enable JSON mode for structured responses

    // Add system and user messages to the chat
    AOAIChatMessages.AddSystemMessage(ChatSystemPrompt); // Add the system prompt
    AOAIChatMessages.AddUserMessage(ChatUserPrompt); // Add the user prompt

    // Generate the chat completion using Azure OpenAI
    AzureOpenAI.GenerateChatCompletion(AOAIChatMessages, AOAIChatCompletionParams, AOAIOperationResponse);

    // Check if the operation was successful and return the result
    if AOAIOperationResponse.IsSuccess() then
        Result := AOAIChatMessages.GetLastMessage() // Retrieve the last message from the chat
    else
        Error(AOAIOperationResponse.GetError()); // Handle errors by raising an error with the response message

    exit(Result); // Return the result of the chat completion
end;

    // Local procedure to provide the system prompt for the chat completion
    local procedure GetSystemPrompt() SystemPrompt: Text
    begin
        // Define the system prompt that instructs the AI on how to process the user's input
        SystemPrompt := @'The user will provide details about a customer including their name, account balance due, last invoice date, and the tone for the response.
        Please generate a reminder for the customer to pay their invoice. Please ensure the reminder is clear, concise, and includes all relevant details.
        Do not include a signature line or any personal information.
        Ensure that the tone matches the requested tone by the user. The output should be formatted as text and should not include any additional formatting or HTML tags.';
    end;

    var
        UserPrompt: Text;
        CompletionResult: Text;
}
