codeunit 50001 ARD_CopilotJob
{
    trigger OnRun()
    begin
        GenerateAddressProposal();
    end;

    /// <summary>
    /// Sets the user prompt to be used for generating address proposals or chat completions.
    /// </summary>
    /// <param name="InputUserPrompt">The text input provided by the user.</param>
    /// <remarks>
    /// This procedure assigns the provided user input to the `UserPrompt` variable, 
    /// which is later used in other procedures such as `GenerateAddressProposal` or `Chat`.
    /// </remarks>
    procedure SetUserPrompt(InputUserPrompt: Text)
    begin
        UserPrompt := InputUserPrompt;
    end;

    /// <summary>
    /// Retrieves the dictionary containing address details generated from the user prompt.
    /// </summary>
    /// <returns>
    /// A dictionary of key-value pairs representing address details.
    /// </returns>
    procedure GetResult(): Dictionary of [Text, Text]
    begin
        exit(AddressDict);
    end;

    /// <summary>
    /// Retrieves the completion result generated from the address proposal or chat process.
    /// </summary>
    /// <returns>
    /// A text value representing the completion result.
    /// </returns>
    internal procedure GetCompletionResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// Generates an address proposal by processing a user prompt and parsing the response.
    /// The response is expected to be in JSON format, and the method extracts key-value pairs
    /// to populate the AddressDict dictionary. If a 'formatted' address is found, it is returned
    /// as the completion result; otherwise, a default message is returned.
    /// </summary>
    /// <remarks>
    /// This method uses a chat function to generate a response based on a system prompt and user input.
    /// The response is parsed as JSON, and keys are added to the AddressDict dictionary in lowercase.
    /// </remarks>
    /// <param name="GetSystemPrompt">A function that provides the system prompt for the chat.</param>
    /// <param name="UserPrompt">The user-provided input for generating the address proposal.</param>
    /// <returns>
    /// A formatted address if available in the response, or a default message indicating no formatted address was found.
    /// </returns>
    local procedure GenerateAddressProposal()
    var
        JResTok: JsonToken;
        TmpText: Text;
        JsonKey: Text;
    begin
        CompletionResult := '';
        TmpText := Chat(GetSystemPrompt(), UserPrompt);

        JResTok.ReadFrom(TmpText);
        foreach JsonKey in JResTok.AsObject().Keys do begin
            AddressDict.add(JsonKey.ToLower(), JResTok.AsObject().GetText(JsonKey));
        end;

        if AddressDict.ContainsKey('formatted') then
            CompletionResult := AddressDict.Get('formatted')
        else
            CompletionResult := 'No formatted address found.';
    end;

    /// <summary>
    /// The Chat procedure interacts with Azure OpenAI to generate a chat completion based on the provided system and user prompts.
    /// It uses various helper codeunits to configure and manage the interaction, including setting up authorization, 
    /// configuring chat parameters, and handling responses.
    /// </summary>
    /// <param name="ChatSystemPrompt">The system prompt to guide the chat completion.</param>
    /// <param name="ChatUserPrompt">The user prompt to provide input for the chat completion.</param>
    /// <returns>
    /// A text result containing the response generated by Azure OpenAI. 
    /// If the operation fails, an error is raised with the corresponding error message.
    /// </returns>
    procedure Chat(ChatSystemPrompt: Text; ChatUserPrompt: Text): Text
    var
        AzureOpenAI: Codeunit "Azure OpenAI";
        EnvironmentInformation: Codeunit "Environment Information";
        AOAIOperationResponse: Codeunit "AOAI Operation Response";
        AOAIChatCompletionParams: Codeunit "AOAI Chat Completion Params";
        AOAIChatMessages: Codeunit "AOAI Chat Messages";
        AOAIDeployments: Codeunit "AOAI Deployments";
        IsolatedStorageWrapper: Codeunit ARD_IsolatedStorageWrapper;
        Result: Text;
        EntityTextModuleInfo: ModuleInfo;
    begin
        // Set up Azure OpenAI authorization using isolated storage values
        AzureOpenAI.SetAuthorization(Enum::"AOAI Model Type"::"Chat Completions",
         IsolatedStorageWrapper.GetEndpoint(), IsolatedStorageWrapper.GetDeployment(), IsolatedStorageWrapper.GetSecretKey());

        // Set the Copilot capability for customer detail processing
        AzureOpenAI.SetCopilotCapability(Enum::"Copilot Capability"::"Customer Detail");

        // Configure chat completion parameters
        AOAIChatCompletionParams.SetMaxTokens(2500); // Set maximum tokens for the response
        AOAIChatCompletionParams.SetTemperature(0); // Set temperature for deterministic responses
        AOAIChatCompletionParams.SetJsonMode(true); // Enable JSON mode for structured responses

        // Add system and user messages to the chat
        AOAIChatMessages.AddSystemMessage(ChatSystemPrompt); // Add the system prompt
        AOAIChatMessages.AddUserMessage(ChatUserPrompt); // Add the user prompt

        // Generate the chat completion using Azure OpenAI
        AzureOpenAI.GenerateChatCompletion(AOAIChatMessages, AOAIChatCompletionParams, AOAIOperationResponse);

        // Check if the operation was successful and return the result
        if AOAIOperationResponse.IsSuccess() then
            Result := AOAIChatMessages.GetLastMessage() // Retrieve the last message from the chat
        else
            Error(AOAIOperationResponse.GetError()); // Handle errors by raising an error with the response message

        exit(Result); // Return the result of the chat completion
    end;

    // Local procedure to provide the system prompt for the chat completion
    local procedure GetSystemPrompt() SystemPrompt: Text
    begin
        // Define the system prompt that instructs the AI on how to process the user's input
        SystemPrompt := @'The user will provide details about a customer address. Your task is to find the best address for that customer.
        The output should be a JSON object with the following fields:
        addressline1, addressline2, city, state, country, postalCode, phone, email, formatted.
        Do not use line breaks or other special characters in addressline1, addressline2, city, state, country, postalCode, phone, email.
        Skip empty nodes.';
    end;

    var
        AddressDict: Dictionary of [Text, Text];
        UserPrompt: Text;
        CompletionResult: Text;

}