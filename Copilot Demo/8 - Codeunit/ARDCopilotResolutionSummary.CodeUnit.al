codeunit 50006 ARD_CopilotResolutionSummary
{
    trigger OnRun()
    begin
        GenerateInvoiceProposal();
    end;

    /// <summary>
    /// Sets the user prompt to be used for generating the resolution note.
    /// </summary>
    /// <param name="InputUserPrompt">The text input provided by the user.</param>
    /// <param name="CustomerName">The name of the customer.</param>
    procedure SetUserPrompt(InputUserPrompt: Text; CustomerName: Text)
    var
        UserPromptBuilder: TextBuilder;
    begin
        if InputUserPrompt <> '' then UserPromptBuilder.AppendLine(InputUserPrompt);
        UserPromptBuilder.AppendLine('Customer Name: ' + CustomerName);
        UserPrompt := UserPromptBuilder.ToText();
    end;

    /// <summary>
    /// Retrieves the completion result generated from the chat process.
    /// </summary>
    /// <returns>
    /// A text value representing the completion result.
    /// </returns>
    internal procedure GetCompletionResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// Generates the resolution note by processing a user prompt and invoking the Chat procedure.
    /// The response is expected to be in text format and is stored in CompletionResult.
    /// </summary>
    /// <remarks>
    /// This method uses a chat function to generate a response based on a system prompt and user input.
    /// </remarks>
    /// <param name="GetSystemPrompt">A function that provides the system prompt for the chat.</param>
    /// <param name="UserPrompt">The user-provided input for generating the resolution note.</param>
    /// <returns>
    /// A formatted resolution note if available in the response, or a default message indicating no formatted resolution note was found.
    /// </returns>
    local procedure GenerateInvoiceProposal()
    var
    begin
        CompletionResult := '';
        CompletionResult := Chat(GetSystemPrompt(), UserPrompt);
    end;

    /// <summary>
    /// The Chat procedure interacts with Azure OpenAI to generate a chat completion based on the provided system and user prompts.
    /// It uses various helper codeunits to configure and manage the interaction, including setting up authorization, 
    /// configuring chat parameters, and handling responses.
    /// </summary>
    /// <param name="ChatSystemPrompt">The system prompt to guide the chat completion.</param>
    /// <param name="ChatUserPrompt">The user prompt to provide input for the chat completion.</param>
    /// <returns>
    /// A text result containing the response generated by Azure OpenAI. 
    /// If the operation fails, an error is raised with the corresponding error message.
    /// </returns>
    procedure Chat(ChatSystemPrompt: Text; ChatUserPrompt: Text): Text
    var
        AzureOpenAI: Codeunit "Azure OpenAI";
        EnvironmentInformation: Codeunit "Environment Information";
        AOAIOperationResponse: Codeunit "AOAI Operation Response";
        AOAIChatCompletionParams: Codeunit "AOAI Chat Completion Params";
        AOAIChatMessages: Codeunit "AOAI Chat Messages";
        AOAIDeployments: Codeunit "AOAI Deployments";
        IsolatedStorageWrapper: Codeunit ARD_IsolatedStorageWrapper;
        Result: Text;
        EntityTextModuleInfo: ModuleInfo;
    begin
        // Set up Azure OpenAI authorization using isolated storage values
        AzureOpenAI.SetManagedResourceAuthorization(Enum::"AOAI Model Type"::"Chat Completions", IsolatedStorageWrapper.GetAOAIAccountName(), IsolatedStorageWrapper.GetSecretKey(), AoaiDeployments.GetGPT41Latest());

        // Set the Copilot capability for customer detail processing
        AzureOpenAI.SetCopilotCapability(Enum::"Copilot Capability"::"Customer Detail");

        // Configure chat completion parameters
        AOAIChatCompletionParams.SetMaxTokens(2500); // Set maximum tokens for the response
        AOAIChatCompletionParams.SetTemperature(0.7); // Set temperature for deterministic responses
        AOAIChatCompletionParams.SetJsonMode(false); // Enable JSON mode for structured responses

        // Add system and user messages to the chat
        AOAIChatMessages.AddSystemMessage(ChatSystemPrompt); // Add the system prompt
        AOAIChatMessages.AddUserMessage(ChatUserPrompt); // Add the user prompt

        // Generate the chat completion using Azure OpenAI
        AzureOpenAI.GenerateChatCompletion(AOAIChatMessages, AOAIChatCompletionParams, AOAIOperationResponse);

        // Check if the operation was successful and return the result
        if AOAIOperationResponse.IsSuccess() then
            Result := AOAIChatMessages.GetLastMessage() // Retrieve the last message from the chat
        else
            Error(AOAIOperationResponse.GetError()); // Handle errors by raising an error with the response message

        exit(Result); // Return the result of the chat completion
    end;

    // Local procedure to provide the system prompt for the chat completion
    local procedure GetSystemPrompt() SystemPrompt: Text
    begin
        // Define the system prompt that instructs the AI on how to process the user's input
        SystemPrompt := @'You are a service manager tasked with communicating with the customer regarding their service invoice.
        You will be provided with details about the services performed by a technician, including the tasks completed, parts used, and the total cost of the service.
        Your goal is to create a clear and concise summary of the service provided, highlighting the key points that the customer should be aware of.
        The returned summary should be professional and easy to understand, avoiding technical jargon where possible.
        The response must be formatted in as HTML.';
    end;

    var
        UserPrompt: Text;
        CompletionResult: Text;
}
