page 50005 ARD_ValidateAddressPrompt
{
    ApplicationArea = All;
    Caption = 'Validate Address Prompt';
    PageType = PromptDialog;
    IsPreview = true;
    Extensible = false;
    PromptMode = Prompt;

    layout
    {
        area(prompt)
        {
            field(ChatRequest; ChatRequest)
            {
                ShowCaption = false;
                MultiLine = true;
                ApplicationArea = All;
                InstructionalText = 'Provide any address details.';
                Editable = false;
                trigger OnValidate()
                begin
                    CurrPage.Update();
                end;
            }
        }

        area(Content)
        {
            field(Output; RequestResponse)
            {
                ShowCaption = false;
                InstructionalText = 'The response generated by the AI based on the provided campaign details.';
                Enabled = true;
                Editable = true;
                MultiLine = true;
                ExtendedDatatype = RichContent;
            }
        }
    }

    actions
    {
        area(SystemActions)
        {
            // You can have custom behaviour for the main system actions in a PromptDialog page, such as generating a suggestion with copilot, regenerate, or discard the
            // suggestion. When you develop a Copilot feature, remember: the user should always be in control (the user must confirm anything Copilot suggests before any
            // change is saved).
            // This is also the reason why you cannot have a physical SourceTable in a PromptDialog page (you either use a temporary table, or no table).
            systemaction(Generate)
            {
                Caption = 'Generate';
                ToolTip = 'Generate Item Substitutions proposal with Dynamics 365 Copilot.';

                trigger OnAction()
                begin
                    RunGeneration();
                end;
            }
            systemaction(OK)
            {
                Caption = 'Confirm';
                ToolTip = 'Add selected Items to Substitutions.';
            }
            systemaction(Cancel)
            {
                Caption = 'Discard';
                ToolTip = 'Discard Items proposed by Dynamics 365 Copilot.';
            }
            systemaction(Regenerate)
            {
                Caption = 'Regenerate';
                ToolTip = 'Regenerate Item Substitutions proposal with Dynamics 365 Copilot.';
                trigger OnAction()
                begin
                    RunGeneration();
                end;
            }
        }
    }

    var
        GenerateAddress: Codeunit ARD_AddressMatchFinder;
        ChatRequest: Text;
        RequestResponse: Text;
        SourceAddress: JsonObject;
        ExistingAddresses: JsonObject;

    /// <summary>
    /// Executes the address generation process by interacting with the GenerateAddress object.
    /// Updates the page caption, sets the user prompt, and attempts to generate an address
    /// up to a maximum of 5 times. If successful, displays the result; otherwise, shows an error message.
    /// </summary>
    /// <remarks>
    /// The procedure uses a loop to retry the address generation process if the result is empty.
    /// It ensures that the process does not exceed 5 attempts to prevent infinite loops.
    /// </remarks>
    /// <exception cref="Error">
    /// Throws an error if the maximum number of attempts is reached without a successful result.
    /// </exception>
    local procedure RunGeneration()
    var
        Attempts: Integer;
        SourceAddressText: Text;
        TargetAddressText: Text;
    begin

        SourceAddress.WriteTo(SourceAddressText);
        ExistingAddresses.WriteTo(TargetAddressText);

        ChatRequest := TargetAddressText;
        CurrPage.Caption := ChatRequest;
        GenerateAddress.SetUserPrompt(ChatRequest);

        Attempts := 0;
        while (StrLen(RequestResponse) = 0) AND (Attempts < 5) do begin
            if GenerateAddress.Run() then
                RequestResponse := GenerateAddress.GetResult();
            Attempts += 1;
        end;

        if (Attempts < 5) then begin
            message(GenerateAddress.GetCompletionResult());
        end else
            Error('Something went wrong. Please try again. ' + GetLastErrorText());
    end;

    procedure GetResult(): Code[20]
    begin
        exit('');
    end;

    procedure SetCurrentAddress(addressline1: Text; addressline2: Text; city: Text; state: Text; country:Text; postalCode: Text)
    var
        Address: TextBuilder;
    begin
        if addressline1 <> '' then Address.AppendLine(addressline1);
        if addressline2 <> '' then Address.AppendLine(addressline2);
        if city <> '' then Address.AppendLine(city);
        if state <> '' then  Address.AppendLine(state);
        if country <> '' then Address.AppendLine(country);
        if postalCode <> '' then Address.AppendLine(postalCode);
        
        ChatRequest := Address.ToText();

        AddTestAddress('user', addressline1, addressline2, city, state, country, postalCode);
    end;

    /// Adds a test address to the 'addresses' array within the ExistingAddresses JsonObject.
    /// If the 'addresses' array does not exist, it is created.
    /// The address details are provided as parameters and added as a JsonObject to the array.
    /// </summary>
    /// <param name="AddressNo">The address number to add.</param>
    /// <param name="addressline1">The first line of the address.</param>
    /// <param name="addressline2">The second line of the address.</param>
    /// <param name="city">The city of the address.</param>
    /// <param name="state">The state of the address.</param>
    /// <param name="country">The country of the address.</param>
    /// <param name="postalCode">The postal code of the address.</param>
    procedure AddTestAddress(AddressNo: Text; addressline1: Text; addressline2: Text; city: Text; state: Text; country:Text; postalCode: Text)
    var
        Address: JsonObject;
        AddressesToken: JsonToken;
        AddressArray: JsonArray;
    begin
        if not ExistingAddresses.Get('addresses', AddressesToken) then 
            ExistingAddresses.Add('addresses', AddressArray)
        else
            AddressArray := AddressesToken.AsArray();

        Address.Add('addressno', AddressNo);
        Address.Add('addressline1', addressline1);
        Address.Add('addressline2', addressline2);
        Address.Add('city', city);
        Address.Add('state', state);
        Address.Add('country', country);
        Address.Add('postalcode', postalCode);

        AddressArray.Add(Address);
    end;
}
